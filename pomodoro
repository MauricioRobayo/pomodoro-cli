#!/bin/bash 

bold=$(tput bold)
gray=$(tput setaf 8)
cyan=$(tput setaf 6)
reset=$(tput sgr0)
player=aplay

set -o nounset # using a variable not set will raise an error.
set -o errexit # exit script if a command fails.

countdown ()
{
    local sec_rem=$2
    local seconds=0
    local minutes=0
    local cl_line=$(tput el)
    # get realpath of script to load assets
    local realpath=$(realpath ${0})
    local appdir=${realpath%/*}  
    while (( $sec_rem > 0 )); do 
        sec_rem=$(( $sec_rem - 1 ))
        seconds=$(( $sec_rem % 60 ))
        minutes=$(( $sec_rem / 60 ))
        case $1 in
            work)
                printf "\r$i: ${bold}Work!${reset} [${gray}%02d:%02d${reset}]"  $minutes $seconds
                ;;
            short-break)
                printf "\r   Short break [${gray}%02d:%02d${reset}]"  $minutes $seconds
                ;;
            long-break)
                printf "\r   Long break [${gray}%02d:%02d${reset}]"  $minutes $seconds
                ;;
        esac
        sleep 1
    done
    case $1 in
        work)
            printf "\r${bold}$i: ${cyan}Work done - Yeah!${reset}\n"
            ${player} "${appdir}/assets/break.wav" &>/dev/null &disown
            ;;
        short-break)
            printf "\r${cl_line}   ${gray}Short break done.${reset}\n"
            ${player} "${appdir}/assets/work.wav" &>/dev/null &disown
            ;;
        long-break)
            printf "\r${cl_line}   ${gray}Long break done.${reset}\n"
            ${player} "${appdir}/assets/pomodoro.wav" &>/dev/null &disown
            ;;
    esac
}

pomodoro ()
{
    read pomodoros work short_break long_break <<< $1
    local period=$2
    local pomodoro_count=1
    # be nice, tell user what he is facing ahead
    printf "Pomodoros: %s\n" "${pomodoros}"
    printf "Work: %s %s\n" "${work}" "${period}"
    printf "Short break: %s %s\n" "${short_break}" "${period}"  
    printf "Long Break: %s %s\n" "${long_break}" "${period}"
    # convert everything to seconds
    if [[ ${period} != seconds ]];then
        work=$(( $work * 60 ))
        short_break=$(( $short_break * 60 ))
        long_break=$(( $long_break * 60 ))
    fi
    read -p "Task name (q to quit): " ans
    [[ $ans == "" ]] && task="New task" || task="${ans}"
    # lets go!
    while true;do
        if [[ $ans == q ]]; then
            if [[ $task != q ]]; then
                work_done=$(( $work * $pomodoros * ( $pomodoro_count - 1 ) ))
                [[ ${period} != seconds ]] && work_done=$(( work_done / 60 ))
                printf "Total work done on '%s': %s %s.\n" "${bold}${task}${reset}" ${work_done} ${period}
            fi
            break
        fi
        printf "Working on '%s'.\n" "${bold}${task}${reset}"
        for ((i=pomodoros*pomodoro_count-pomodoros+1; i<=pomodoros*pomodoro_count; i++));do
            countdown work $work
            if (( $i < pomodoros * pomodoro_count )); then
                countdown short-break $short_break
            else
                countdown long-break $long_break
            fi
        done
        (( pomodoro_count++ ))
        read -p "Press Enter to continue with '${task}' or q to quit: " ans
    done
}

main ()
{
    # default values
    local interval="4 25 5 15"
    local period=minutes
    # set options in defined by user
    while getopts ":si:" opt; do
        case $opt in
            s) period=seconds ;;
            i) interval=$OPTARG ;;
            \?) echo "Invalid option: -$OPTARG" >&2 ;;
        esac
    done
    pomodoro "${interval}" "${period}"
}

main "$@"
